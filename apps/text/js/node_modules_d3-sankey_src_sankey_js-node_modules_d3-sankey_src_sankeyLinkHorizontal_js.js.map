{"version":3,"file":"node_modules_d3-sankey_src_sankey_js-node_modules_d3-sankey_src_sankeyLinkHorizontal_js.js?v=1aa2e55bfe9136b8de79","mappings":"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","sources":["webpack:///text/node_modules/d3-sankey/node_modules/d3-array/src/min.js","webpack:///text/node_modules/d3-sankey/src/align.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-array/src/sum.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-array/src/max.js","webpack:///text/node_modules/d3-sankey/src/constant.js","webpack:///text/node_modules/d3-sankey/src/sankey.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-path/src/path.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-shape/src/array.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-shape/src/constant.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-shape/src/point.js","webpack:///text/node_modules/d3-sankey/node_modules/d3-shape/src/link/index.js","webpack:///text/node_modules/d3-sankey/src/sankeyLinkHorizontal.js"],"sourcesContent":["export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export var slice = Array.prototype.slice;\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import {path} from \"d3-path\";\nimport {slice} from \"../array.js\";\nimport constant from \"../constant.js\";\nimport {x as pointX, y as pointY} from \"../point.js\";\nimport pointRadial from \"../pointRadial.js\";\n\nfunction linkSource(d) {\n  return d.source;\n}\n\nfunction linkTarget(d) {\n  return d.target;\n}\n\nfunction link(curve) {\n  var source = linkSource,\n      target = linkTarget,\n      x = pointX,\n      y = pointY,\n      context = null;\n\n  function link() {\n    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\n    if (!context) context = buffer = path();\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  link.source = function(_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n\n  link.target = function(_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n\n  link.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n\n  link.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n\n  link.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), link) : context;\n  };\n\n  return link;\n}\n\nfunction curveHorizontal(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n}\n\nfunction curveVertical(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n}\n\nfunction curveRadial(context, x0, y0, x1, y1) {\n  var p0 = pointRadial(x0, y0),\n      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\n      p2 = pointRadial(x1, y0),\n      p3 = pointRadial(x1, y1);\n  context.moveTo(p0[0], p0[1]);\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\nexport function linkHorizontal() {\n  return link(curveHorizontal);\n}\n\nexport function linkVertical() {\n  return link(curveVertical);\n}\n\nexport function linkRadial() {\n  var l = link(curveRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n"],"names":["min","values","valueof","undefined","value","index","targetDepth","d","target","depth","left","node","right","n","height","justify","sourceLinks","length","center","targetLinks","sum","max","constant","x","ascendingSourceBreadth","a","b","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","get","Error","computeLinkBreadths","y1","link","width","Sankey","py","sort","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","i","entries","Map","map","push","computeNodeLinks","fixedValue","Math","computeNodeValues","current","Set","next","size","add","computeNodeDepths","computeNodeHeights","columns","kx","Array","floor","call","layer","column","computeNodeLayers","c","ky","y","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","computeNodeBreadths","w","v","targetTop","reorderNodeLinks","resolveCollisions","sourceTop","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","_","nodeAlign","nodeSort","nodeWidth","nodePadding","extent","pi","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","path","prototype","constructor","moveTo","closePath","lineTo","quadraticCurveTo","bezierCurveTo","x2","y2","arcTo","r","x21","y21","x01","y01","l01_2","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","cos","sin","cw","da","rect","h","toString","slice","p","linkSource","linkTarget","curve","context","buffer","argv","s","t","curveHorizontal","horizontalSource","horizontalTarget"],"sourceRoot":""}
{"version":3,"file":"vendors-node_modules_mdast-util-from-markdown_lib_index_js.js?v=14222a390ba2fff4b48a","mappings":"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","sources":["webpack:///text/node_modules/mdast-util-to-string/lib/index.js","webpack:///text/node_modules/micromark-util-chunked/index.js","webpack:///text/node_modules/micromark-util-combine-extensions/index.js","webpack:///text/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack:///text/node_modules/micromark-util-character/index.js","webpack:///text/node_modules/micromark-factory-space/index.js","webpack:///text/node_modules/micromark/lib/initialize/content.js","webpack:///text/node_modules/micromark/lib/initialize/document.js","webpack:///text/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack:///text/node_modules/micromark-util-subtokenize/index.js","webpack:///text/node_modules/micromark-core-commonmark/lib/content.js","webpack:///text/node_modules/micromark/lib/initialize/flow.js","webpack:///text/node_modules/micromark/lib/initialize/text.js","webpack:///text/node_modules/micromark-util-resolve-all/index.js","webpack:///text/node_modules/micromark/lib/create-tokenizer.js","webpack:///text/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack:///text/node_modules/micromark-core-commonmark/lib/list.js","webpack:///text/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack:///text/node_modules/micromark-factory-destination/index.js","webpack:///text/node_modules/micromark-factory-label/index.js","webpack:///text/node_modules/micromark-factory-title/index.js","webpack:///text/node_modules/micromark-factory-whitespace/index.js","webpack:///text/node_modules/micromark-util-normalize-identifier/index.js","webpack:///text/node_modules/micromark-core-commonmark/lib/definition.js","webpack:///text/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack:///text/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack:///text/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack:///text/node_modules/micromark-util-html-tag-name/index.js","webpack:///text/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack:///text/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack:///text/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack:///text/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack:///text/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack:///text/node_modules/micromark-core-commonmark/lib/label-end.js","webpack:///text/node_modules/micromark-util-classify-character/index.js","webpack:///text/node_modules/micromark-core-commonmark/lib/attention.js","webpack:///text/node_modules/micromark-core-commonmark/lib/html-text.js","webpack:///text/node_modules/micromark-core-commonmark/lib/code-text.js","webpack:///text/node_modules/micromark/lib/constructs.js","webpack:///text/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack:///text/node_modules/micromark-core-commonmark/lib/autolink.js","webpack:///text/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack:///text/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack:///text/node_modules/micromark/lib/parse.js","webpack:///text/node_modules/micromark/lib/preprocess.js","webpack:///text/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack:///text/node_modules/micromark-util-decode-string/index.js","webpack:///text/node_modules/unist-util-stringify-position/lib/index.js","webpack:///text/node_modules/mdast-util-from-markdown/lib/index.js","webpack:///text/node_modules/micromark/lib/postprocess.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n"],"names":["one","value","includeImageAlt","Boolean","node","alt","children","Array","isArray","values","result","index","length","join","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","apply","slice","push","hasOwnProperty","syntaxExtension","all","extension","hook","left","call","undefined","right","code","constructs","existing","before","add","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","this","parser","contentInitial","lineStart","previous","token","contentType","next","data","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","document","disable","null","includes","blankLine","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","use","nextEvents","movePoint","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","codeText","gap","tailExitIndex","headEnterIndex","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","parse","options","extensions","combineExtensions","concat","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","stringifyPosition","position","pos","own","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","lang","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","toString","lastIndex","exec","Math","ceil","preprocess","d","combined"],"sourceRoot":""}